# Generated by Django 3.2.4 on 2021-06-24 12:32

import datetime

import cuid
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "madien_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("nickname", models.CharField(blank=True, max_length=100, null=True)),
                ("first_name", models.CharField(blank=True, max_length=100, null=True)),
                ("last_name", models.CharField(blank=True, max_length=100, null=True)),
                ("middle_name", models.CharField(blank=True, max_length=20, null=True)),
                ("title", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "honorific_prefix",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Mr", "Single or Married Man"),
                            ("Mrs", "Married Woman"),
                            ("Ms", "Single or Married Woman"),
                            ("Dr", "Medical Doctor"),
                            (
                                "Hon",
                                "Honorable (Judge, Justice, other High Ranking Gov official",
                            ),
                            ("Eld", "Elder (religious title)"),
                            ("Fth", "Father (religious title)"),
                            ("Bth", "Brother (religious title)"),
                            ("Sis", "Sister (nun or other female religious leader)"),
                            ("Rev", "Reverand (Religious leader"),
                            ("Rab", "Rabbi (religious leader usually of jewish faith)"),
                        ],
                        default="",
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "honorific_suffix",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PhD", "Doctoralily Educated"),
                            ("Esq", "Esquire, Lawyer"),
                        ],
                        default="",
                        max_length=4,
                        null=True,
                    ),
                ),
                ("suffix", models.CharField(blank=True, max_length=10, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("is_patient", models.BooleanField(default=False)),
                ("is_clinic_staff", models.BooleanField(default=False)),
                ("date_of_death", models.DateField(blank=True, null=True)),
                ("retention_only", models.BooleanField(default=False)),
                ("do_not_contact", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("idempotent_key", models.CharField(default=cuid.cuid, max_length=50)),
                (
                    "address_type",
                    models.CharField(
                        choices=[
                            ("MAIL", "Mailing"),
                            ("RESD", "Residential"),
                            ("BUSN", "Business"),
                        ],
                        max_length=4,
                    ),
                ),
                ("street1", models.CharField(max_length=100)),
                ("street2", models.CharField(blank=True, max_length=100, null=True)),
                ("state", models.CharField(max_length=4)),
                ("city", models.CharField(max_length=50)),
                ("zipcode", models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        default="default.webp", upload_to="raw_profile_pictures"
                    ),
                ),
                (
                    "mobile_number",
                    models.CharField(
                        blank=True,
                        help_text="Numbers only no spaces or characters. Example: xxxxxxxxxx",
                        max_length=15,
                        null=True,
                    ),
                ),
                ("internal_notes", models.TextField(blank=True, default="", null=True)),
                ("addresses", models.ManyToManyField(blank=True, to="users.Address")),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                check=models.Q(("date_of_death__lte", datetime.date(2021, 6, 25))),
                name="not_dead_tomorrow",
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                check=models.Q(("date_of_birth__lte", datetime.date(2021, 6, 24))),
                name="born_before_today",
            ),
        ),
    ]
